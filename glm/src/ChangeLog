2001-09-18  Ray Tomlinson  <RTomlinson@HEFEWEIZEN>

	* org/cougaar/domain/mlm/plugin/organization/OrgDataPlugInFile.java (Repository): 
	File version of OrgDataPlugIn extends AssetDataPlugInFile.
	
	* org/cougaar/domain/mlm/plugin/organization/OrgDataPlugInDB.java (Repository): 
	Database version of OrgDataPlugIn extends AssetDataPlugInDB.

2001-09-14  Ray Tomlinson  <RTomlinson@HEFEWEIZEN>

	* org/cougaar/domain/glm/plugins/GLMDecorationPlugIn.java (Repository): 
	* org/cougaar/domain/glm/plugins/ClusterOPlan.java (Repository):
	Keep track of ClusterOPlans so can be found after rehydration.
	Otherwise, they keep building up each time rehydration is performed.

2001-09-13  Todd Wright <twright@bbn.com>

	* org/cougaar/domain/glm/ldm/plan/Position.java:
	Modified to extend core's new LatLonPoint.  Also modified
        the corresponding "NewPosition" and "PositionImpl".

2001-09-13  Todd Wright <twright@bbn.com>

	* org/cougaar/domain/glm/ldm/asset/alpprops.def:
	Removed LocationSchedulePG, now in core.

	* several GLM, UIFramework, TOPS, GLMTrans classes:
	Fixed import statements to match the moved LocationSchedulePG.

2001-09-07  Ray Tomlinson  <RTomlinson@bbn.com>

	* org/cougaar/domain/mlm/plugin/organization/GLSRescindPlugIn.java:
	Make random pusher GUI optional controlled by
	org.cougaar.domain.mlm.plugin.organization.GLSRescindPlugIn.hidden
	system property. Defaults to true (hidden).

	* org/cougaar/domain/mlm/plugin/organization/GLSGUIInitPlugIn.java:
	Make random pusher GUI optional controlled by
	org.cougaar.domain.mlm.plugin.organization.GLSGUIInitPlugIn.hidden
	system property. Defaults to true (hidden).

2001-09-06  Ray Tomlinson  <RTomlinson@bbn.com>

	* org/cougaar/domain/glm/ldm/asset/InventoryBG.java:
	Fix off by one error in processing inventory reports. Manifested
	as array index exception.

	* org/cougaar/domain/glm/ldm/QueryLDMPlugIn.java:
	Include the failing query when printing a failed query message.
	What good is an error message that says that one of your many
	queries failed, but doesn't say which one.

2001-08-17  Ray Tomlinson  <RTomlinson@bbn.com>

	* src/org/cougaar/domain/mlm/plugin/CompletionAssessor.java:
	Add unload() to dispose the GUI frame.

	* src/org/cougaar/domain/mlm/plugin/GLSGUIBasePlugIn.java: 
	Add unload() to dispose the GUI frame.	

2001-06-06  Beth DePass  <bdepass@bbn.com>
  * org/cougaar/domain/mlm/plugin/generic/UniversalExpanderPlugIn.java:
  Now uses a parameter specified in cougaar.rc to define what the 
  database expansion table is. For example:
    generic.database.expander.expansion_table=constr_task_exp
  Also added some comments and did some general cleanup.
  
  * doc/UniversalExpanderPlugIn.html:
  New detailed README file for the UniversalExpanderPlugIn.

2001-06-01  Amy Fedyk  <afedyk@bbn.com>

	Changed MAINTAINING Prep Phrase on Supply and ProjectSupply tasks.
	The MAINTAINING PP now contains a representation of the Asset that
	the tasks are supporting instead of the Asset itself. BUG #415

	* org/cougaar/domain/glm/plugins/MaintainedItem.java:
	New class for representing a Maintained item.  Does not
	necessarily represent an Asset but the item often is an Asset.

	* org/cougaar/domain/glm/plugins/projection/GenerateSupplyDemandExpander.java
	Create Supply and ProjectSupply tasks with new MaintainedItem class instead
	of the Asset.

	* org/cougaar/domain/glm/plugins/inventory/GeneralInventoryManager.java
	Uses new MaintainedItem class on refill tasks to determine which inventories
	have changed.

	* org/cougaar/domain/glm/plugins/inventory/InventoryManager.java
	When creating Supply and ProjectSupply refills, fill MAINTAINING Prep Phrase
	with MaintainedItem class instead of the Inventory.

	* org/cougaar/domain/glm/plugins/inventory/InventoryPlugIn.java
	findOrMakeInventory() convenience method should now check for NULL inventory
	IDs.

	* org/cougaar/domain/glm/plugins/PublicationKey.java
	Uses new MaintainedItem class instead of grabbing TypeID and ItemID from Asset.

	* org/cougaar/domain/glm/plugins/TaskUtils.java
	Uses MaintainedItem.MaintainedItemType to determine if a task is supporting an
	Inventory.

	* org/cougaar/domain/glm/execution/cluster/PSP_ExecutionWatcher.java
	* org/cougaar/domain/mlm/plugin/assessor/ConsumptionAssessorPlugIn.java
	Use new MaintainedItem instead of Asset from MAINTAINING Prep Phrase
	
	
2001-05-18  Ray Tomlinson  <rtomlinson@bbn.com>

	* org/cougaar/domain/glm/plugins/TaskUtils.java:
	Support fixes for Bug #407
	Expose computation of daily quantity from a Rate as a separate,
	public method.

	* org/cougaar/domain/glm/plugins/inventory/InventoryManager.java:
	Fixes Bug #407
	Under some conditions, POL inventory goes negative due to
	incorrect refill projections. The refills are too small relative
	to the demand. This does not happen all the time, but seems to
	happen mostly when the level is ramped down to the average demand
	at the refill switchover day.
	Analysis. The computation of refill projections is performed as an
	adjustment to existing refill projections. When the needed
	adjustment is negative (such as when ramping down to the average
	level), the needed projection rate may be negative. Since negative
	projections are not allowed, the existing projection is removed,
	but the effect of this on the inventory level is computed as zero
	instead of the negative of the removed refill projection amount.
	This artificially elevates the inventory level causing the IM to
	omit subsequent projections as well even though they are actually
	needed.
	The effect of the removed projection should be computed correctly
	as the negative if the existing projection daily amount

2001-05-08  Ray Tomlinson  <RTomlinson@bbn.com>

	Bug #402
	* org/cougaar/domain/glm/ldm/asset/InventoryBG.java:
	Inventory first planning day should be the first day of demand,
	but the first day of demand was computed before the current set of
	demand tasks had been added to the inventory. When this happened,
	the default first day of 0 was used leading and incorrect first
	planning day.
	The first planning day is now determined after demand tasks have
	been added.

2001-05-03  Ray Tomlinson  <RTomlinson@bbn.com>

	* org/cougaar/domain/glm/plugins/inventory/InventoryManager.java:
	Bug #392
	Compute refill switchover day correctly even when the first day of
	demand is later than the switchover day. The buggy code started
	with the first planning day so the switchover day could never be
	computed as less that the first planning day. This could cause
	refill tasks to be generated after the switchover day.

	* org/cougaar/domain/glm/ldm/asset/InventoryBG.java:
	Bug #392
	Set the imputed day of a list of dueins everytime the inventory is
	reset.

2001-05-01  Ray Tomlinson  <RTomlinson@bbn.com>

	* org/cougaar/domain/glm/plugins/inventory/InventoryPlugIn.java:
	Add method to record a new customer based on a supply or withdraw
	task.

	* org/cougaar/domain/glm/plugins/inventory/InventoryManager.java:
	Companion modifications for keeping track of inventories needing
	attention while waiting for all customers to present their demand.

	* org/cougaar/domain/glm/plugins/inventory/GeneralInventoryManager.java:
	Modifications to accumulate inventories needing attention while
	waiting for all customers to present their demand.
	Refine the test for activation due to changes in refill
	allocations. Activation is necessary only for changes to the
	estimated result not for arbitrary changes to the allocation.

	* org/cougaar/domain/glm/plugins/DecorationPlugIn.java:
	Add logic to delay execution of a processor until there is a
	reasonable assurance that all customers have sent their tasks. For
	inventory management, this allows inventory management to be
	delayed until all demands are present. This more efficient than
	successive replanning cycles.

	* org/cougaar/domain/glm/plugins/BasicProcessor.java:
	Catch exceptions when creating a description of an
	AllocationResult.

	* org/cougaar/domain/glm/ldm/asset/InventoryBG.java:
	Make sure that all levels have been computed before generating
	scheduled content. Failure to do so means that late refill or
	demand may not be reflected in the displayed levels.

2001-04-30  Ray Tomlinson  <RTomlinson@bbn.com>

	* org/cougaar/domain/glm/plugins/inventory/WithdrawAllocator.java: 
	Bug #375
	Create initial estimated result anticipating a successful outcome
	so that new allocation results need not be propagated after a
	successful outcome. Also, publishChange an Inventory after
	additional tasks are allocated to it or the tasks already
	allocated change preferences. This stimulates the IM to run.

	* org/cougaar/domain/glm/plugins/inventory/SupplyExpander.java: 
	Bug #375
	Create initial estimated result anticipating a successful outcome
	so that new allocation results need not be propagated after a
	successful outcome.

	* org/cougaar/domain/glm/ldm/asset/InventoryBG.java:
	Bug #376
	More efficient implementation of determineInventoryLevel keeps
	track of valid and invalid range of levels and only computes new
	levels as needed. Also keeps the duein and dueout totals so they
	are not enumerated and recomputed every time.

	* org/cougaar/domain/glm/plugins/inventory/GeneralInventoryManager.java:
	Bug #375
	Remove changed withdraw allocation subscription and attendant
	checks. The IM should run when the tasks change, not the
	allocations of those tasks. The existing modified inventory
	subscription is correct and sufficient.

	* org/cougaar/domain/glm/plugins/inventory/ExternalAllocator.java:
	Bug #375
	Create initial estimated result anticipating a successful outcome
	so that the inventory manager need not run again for a successful
	outcome.

	* org/cougaar/domain/glm/plugins/TaskUtils.java:
	Bug #375
	comparePreferences requires exactly matching values. Rounding
	difference lead to apparent differences that should be ignored.
	Use the nearlyEqual method.

	* org/cougaar/domain/glm/plugins/BasicProcessor.java:
	Part of Bug #334
	Fix bug in diffProjections leading to duplicate projections in
	certain cases.

	* org/cougaar/domain/glm/ldm/asset/DueIn.java:
	Bug #376
	Move function to DueIO base class.

	* org/cougaar/domain/glm/ldm/asset/DueOut.java:
	Bug #376
	Move function to DueIO base class.

	* org/cougaar/domain/glm/ldm/asset/DueIO.java:
	Bug #376
	common functionality of DueIn and DueOut classes. This
	facilitates other changes to InventoryBG.

2001-04-23  Ray Tomlinson  <RTomlinson@bbn.com>

	* org/cougaar/domain/mlm/ui/planviewer/inventory/InventoryChartUI.java:
	Fixes Bug #279
	Add -demo option to switch on larger fonts. Without this option,
	fonts are normal size.

2001-04-20  Amy Fedyk <afedyk@bbn.com>
	* org/cougaar/domain/glm/plugins/TaskUtils.java:
	Fixes bug #341
	Return ZERO for the Quantity when the AllocationResult on the
	retill task is not success.

	* org/cougaar/domain/glm/plugins/InventoryManager.java
	* org/cougaar/domain/glm/plugins/GeneralInventoryManager.java:
	Fixes bug #307
	Remove references to isBattalionLevel() and remove the method 
	itself.  Depends on a very unreliable method of determining 
	leaf nodes.
	
2001-04-20  Ray Tomlinson  <RTomlinson@bbn.com>

	* org/cougaar/domain/glm/execution/eg/TripletFCPlugIn.java:
	Support 24x7
	Abstracted the generic part of the POLSpecialPlugIn and added "all
	consumables" selection plus extensible "multiplier" specification.
	Subclasses can specify an arbitrary set of fields to be entered
	for determining the "multiplier".

	* org/cougaar/domain/glm/execution/eg/TwentyFourBySevenPlugIn.java:
	Support 24x7
	New plugin allows the failure rate of selected consumables be
	controlled by a sensor readout.

	* org/cougaar/domain/glm/execution/eg/TimeGUI.java:
	Support 24x7
	Insure using GMT for execution time. This brings execution time
	into line with the time displayed in inventory chart ui.

	* org/cougaar/domain/glm/execution/eg/POL2PlugIn.java:
	Support 24x7
	Reimplement POLSpecialPlugIn using TripletFCPlugIn.

	* org/cougaar/domain/glm/execution/eg/EventGenerator.java:
	Support 24x7 demo
	Remove debug println.

	* org/cougaar/domain/glm/execution/eg/EGDate.java:
	Support 24x7 demo
	Add static method for formatting a date ins the EG style.

	* org/cougaar/domain/glm/plugins/inventory/InventoryManager.java:
	Fixes bug #342
	In generateProjections, always terminate the previous refill
	projection on the switchover day and start a new one. This makes
	the first active refill projection be based on the reorder level
	just prior to the switchover day instead of earlier garbage.

2001-04-19  Ray Tomlinson  <RTomlinson@bbn.com>

	* org/cougaar/domain/glm/plugins/inventory/InventoryManager.java:
	Fix bug #334
	Rewrite reorder profile approximation to correct bugs.

2001-04-18  Mark Davis  <mdavis@bbn.com>
        Add maintainAtCapacity flag.
	
        * org/cougaar/domain/glm/ldm/asset/alpprops.def
	* org/cougaar/domain/glm/ldm/asset/InventoryBG.java
	* org/cougaar/domain/glm/plugins/inventory/InventoryManager.java
	* org/cougaar/domain/glm/plugins/inventory/InventoryPolicy.java
	* org/cougaar/domain/glm/plugins/inventory/InventoryPlugIn.java
	* org/cougaar/domain/mlm/construction/ConstructionInventoryManager.java
	* org/cougaar/domain/mlm/construction/ConstructionInventoryBG.java

	The above files were changed in order to introduce a new
	maintainAtCapacity boolean flag into the InventoryPolicy.
	Now, like the fillToCapacity flag which means the goal level should
	never go above capacity, maintainAtCapacity means the inventory
	level should never drop below the capacity level.

	The InventoryManager was effected to help set the flag and also
	getMinReorderLevel and getMaxReorderLevel were modified to handle
	the majority of the cases.   getMinReorderLevel now bumps up the 
	reorder level to capacity when maintainAtCapacity is set to true.
	getMaxReorderLevel always limits to capacity now.
	
	* glm/configs/common/InventoryPolicy-ARBN.ldm.xml
	Set the maintain at capacity flag to true for Ammo at battalions

2001-04-16  Mark Davis  <mdavis@bbn.com>

	* org/cougaar/domain/glm/ldm/asset/InventoryBG.java;
	First large part to fix for bug #207.
	Compute an NDays of Demand for every planning day and
	put it into an array.   This is based on a new call
	from InventoryManager that passes relevant policy information
	as well as the min and max level for the reorder level which
	is derived from subclasses of the InventoryManager.
	Moved getReorderLevel() and getGoalLevel() from InventoryManager,
	and accomplish the same behavior but now these methods are
	on the InventoryBG.

	* Set the reorder level to never return more than the capacity
	when getFillToCapacity() is turned on.  Also, take out the setting 
	of capacity to a higher level, was causing problems.  Many were 
	solved by above getFillToCapacity() fix, but Ray feels this capacity
	is not used for anything but a concept (not in any calculations 
	but to set reorder level, etc), so it should not be set on the 
	fly.   This is to fix bug #306

	* org/cougaar/domain/glm/plugins/inventory/InventoryManager.java:
	* org/cougaar/domain/glm/plugins/inventory/GeneralInventoryManager.java:
	In order to work with fix above, rip out all code for getGoalLevel
	and reorderLevel and replace call to those with calls to methods
	with same name on InventoryBG.

	These changes should allow for the desimination of the this information
	to the GUI's in the future.

	* org/cougaar/domain/mlm/construction/ConstructionInventoryManager.java
	In order to work with these fixes, take out the implementation
	of getReorderLevel() and replace with new getMaxReorderLevel() which
	encapsulates the same behavior.
	
2001-04-16  Ray Tomlinson  <RTomlinson@bbn.com>

	* org/cougaar/domain/glm/ldm/asset/InventoryBG.java:
	Fixes bug #312
	Return the first day of demand from getFirstPlanningDay if it is
	greater than today. This confines refills from an inventory
	manager to just prior to the first demand. Ideally, the first
	planning day would be the day that the manager arrives at its
	destination and is ready to conduct business, but there is no easy
	way to do this.

	* org/cougaar/domain/glm/plugins/inventory/InventoryManager.java:
	Part of fix for bug #306
	Move computation of boosted capacity into a separate method so it
	can be overridden. Used by AntsGeneralInventoryManager to avoid a
	cycle of increasing capacity to huge levels.

	* org/cougaar/domain/glm/plugins/inventory/InventoryManager.java:
	Temporary fix for bug #307
	Return false from isBattalionLevel when the cluster is SPTBN or TCBN.

	* org/cougaar/domain/glm/plugins/inventory/GeneralInventoryManager.java:
	Fixes bug #309
	Remove refillNeeded override. The override was checking for refill
	switchover day and claiming that no refill was needed after the
	switchover day. This is incorrect -- the refill is still needed,
	it just can't be satisfied by ordering a refill. Instead,
	orderRefill checks the switchover day and refuses to place an
	order after the switchover.	

2001-04-16  Brian Krisler <bkrisler@bbn.com>
	* org/cougaar/domain/mlm/ui/planviewer/XMLTreeFactory.java

	Removed; Was not being used and also extended a class that
	no longer exists in the new Xerces API.

2001-04-13  Ray Tomlinson  <RTomlinson@bbn.com>

	* org/cougaar/domain/glm/plugins/BasicProcessor.java:
	Debugging
	Use TimeAspectValue when editing start and end times of
	projections so they print as dates instead of doubles. Remove dead
	code.

2001-04-12  Ray Tomlinson  <RTomlinson@bbn.com>

	* org/cougaar/domain/glm/plugins/inventory/GeneralInventoryManager.java:
	When the need for a previously failed refill goes to zero, don't
	remove the refill. Instead, change to quantity to be teeny. This
	avoids a problem where the IM would later attempt a refill on that
	day leading to an infinite cycle.

	* org/cougaar/domain/glm/plugins/inventory/InventoryManager.java:
	Accumulate negative projection rates and apply them at the next
	opportunity. Sometimes changing reorder levels imply a reduction
	in inventory level for which a negative projection rate would be
	necessary. We don't generate negative projections. Instead the
	effect is accumulated and used to reduce subsequent projections
	having positive rates.
	Fix the reorder profile code to confine observations to the
	boundaries of the projection being profiled. Looking beyond the
	boundary may cause the generation of excessive corrections that
	cannot be undone.

	* org/cougaar/domain/glm/ldm/asset/InventoryBG.java:
	Reimplement getNDaysDemand with an algorithm that prevents reorder
	levels from dropping; they can only increase. This is an attempt
	to improve the stability of the inventory manager. This
	implementation also requires that the level increase by a certain
	amount before it actually takes effect.	

2001-04-10  Ray Tomlinson  <RTomlinson@bbn.com>

	* org/cougaar/domain/glm/plugins/inventory/InventoryManager.java:
	Fixes Bug #273
	Change end test on generateProjections to allow for the
	possibility that the number of days having valid projected demand
	may be less that the total planning days. The null returned when
	the end of valid demand is reached caused the NPE. Now the loop
	terminates when the end is reached.

	* org/cougaar/domain/glm/ldm/asset/InventoryBG.java:
	Addresses Bug #273
	Add checks that the type of quantity for this inventory is one
	that we know how to deal with. If the initial level of the
	inventory is of a type that is not understood, an exception is
	thrown. This is better than a later NPE, but the real fix is to
	accommodate the type of quantity.

2001-04-09  Ray Tomlinson  <RTomlinson@bbn.com>

	* org/cougaar/domain/mlm/ui/data/UIInventoryImpl.java:
	Process phased allocation results. The actual values for a
	projection are phased, so the quantity schedules must be built
	from the phased result.
	Supply tasks no longer have a start time. Use only the end time of
	such tasks. The "useStartTime" concept was never really correct
	and is now gone!

	* org/cougaar/domain/glm/plugins/DecorationPlugIn.java:
	Debugging Support
	Correctly identify the class of the plugin.

	* org/cougaar/domain/glm/plugins/AssetUtils.java:
	Fix Bug #235
	Add single time version of getSupportingOrgs -- Supply tasks only
	have an END_TIME and it only makes sense to find the relationships
	in effect at that time.

	* org/cougaar/domain/glm/ldm/asset/alpprops.def:
	Fix Bug #235
	Add methods to support correct inventory management.

	* org/cougaar/domain/glm/ldm/asset/alpassets.def:
	Add InventoryPG slot. Every Inventory has an InventoryPG, and it
	is referenced repeatedly. Might as well be a slot.

	* org/cougaar/domain/mlm/plugin/sample/UniversalAllocatorPlugIn.java:
	Debugging support
	Add code to deliver all supply tasks one day early. This code is
	unconditionally suppressed, but can be recompiled in an enabled
	state for testing the behavior of the IM when it receives refills
	early.	

	* org/cougaar/domain/glm/plugins/inventory/InventoryManager.java:
	Fix Bug #235
	Major change to adjustForInadequateInventory to incorporate refill
	processing as well. These cannot be done as indenpendent
	activities because the effect of removing demand (dueouts) must be
	accounted for before refill processing for the following days.
	Now, for each day the following happens:
	   if there is a failed refill:
	       adjust quantity of the failed refill to the bare minimum
	   else
	       order a refill if needed
	   if a refill was needed but couldn't be ordered
	       fail enought dueouts to bring the inventory up to the
	       reorder level
        Adjust generated projections to account for shifting reorder level
	using a horizon following algorithm. This algorithm adjusts refill
	projections with a profile that overbounds the average of the goal
	and reorder levels.

	* org/cougaar/domain/glm/plugins/inventory/GeneralInventoryManager.java: 
	Fix Bug #235
	Implement three methods of altering existing refills:
	REFILL_ALTER_TASK -- change task preferences
	REFILL_REPLACE_TASK -- rescind and issue new task
	REFILL_ADD_TASK -- add another task for the increment
	Inventories are now refilled as part of
	"adjustForInadequateInventory. This is necessary because refills
	subsequent to a failed refill cannot be done until the dueouts are
	failed to bring inventory levels back up.
	orderRefill now adjusts the quantity of previous orders that have
	failed down to the minimum amount required to reach the reorder
	level.
	Refactor orderRefill into orderNewRefill parallel to
	orderRefillWithPrevious.

	* org/cougaar/domain/glm/ldm/asset/InventoryBG.java:
	Fix Bug #235
	Add dueins indexed by requested day and use for
	refillAlreadyFailedOnDay and getRefillOnDay
	Set inventory start time to today, always. Because demand does not
	appear all at once a start time based on later demand that happens
	to arrive first will mistakenly set the inventory start time too
	late.

	* org/cougaar/domain/glm/ldm/asset/DueOut.java:
	Fix Bug #235
	Initialize filled_ to previouslyFilled for non-projections.

	* org/cougaar/domain/glm/plugins/inventory/InventoryManager.java:
	Fix Bug #235
	Need access to routines in GeneralInventoryManager.
	Move getGoalLevel from GeneralInventoryManager.
	Check for null "previous" projection in generateProjections. This
	avoids an NPE just after rescinding GLS.
	Use goal level instead of reorder level when adjusting
	projected refills to track inventory demand.
	Change default safety level factor to 0.25 (the safety level is
	25% of the reorder level). This is more realistic than allowing
	the inventory to drop all the way to the safety level.

	* org/cougaar/domain/glm/plugins/inventory/GeneralInventoryManager.java:
	Fix Bug #235
	Need access to routines in GeneralInventoryManager.
	Move getGoalLevel to base class (InventoryManager)	

	* org/cougaar/domain/mlm/ui/data/UIInventoryImpl.java:
	Debugging support
	Add some debugging output.

	* org/cougaar/domain/mlm/ui/data/UIQuantityScheduleElement.java:
	Debugging support
	Add toString method.

	* org/cougaar/domain/mlm/plugin/sample/UniversalAllocatorPlugIn.java:
	Debugging support
	Remove debugging printlns.
	Respond to task preference changes and adjust allocations
	accordingly.

	* org/cougaar/domain/glm/plugins/inventory/WithdrawAllocator.java:
	Fix Bug #235
	Replace any estimated allocation result when the preferences of
	the withdraw task change.

	* org/cougaar/domain/glm/plugins/inventory/SupplyExpander.java:
	Fix Bug #235
	Check for null allocation result in aggregator. Use currentar when
	equal to new aggregated result.
	Update subtasks when changes occur in supply tasks. E.g., a change
	in the rate preference of a supply is propagated to the rate
	preference of the withdraw task.
	Remove dead code.

	* org/cougaar/domain/glm/plugins/inventory/SupplyExpander.java:
	Fix Bug #235 Install AllocationResultAggregator on supply
	expansions to correctly aggregate the allocation result instead of
	doing publishChange on the subtasks. The latter is unstable and
	ust plain wrong.

	* org/cougaar/domain/glm/plugins/inventory/GeneralInventoryManager.java:
	Fix Bug #235	
	Move update of refill allocs to ExternalAllocator.
	Remove refill_qty*1.3 kludge.
	Reset the estimated allocation result of an altered refill task.
	Move a bunch of refill methods to InventoryManager. These are
	pretty generic methods and can always be overridden of different
	behavior is desired.

	* org/cougaar/domain/glm/plugins/inventory/ExternalAllocator.java:
	Fix Bug #235
	Move the updating of the allocation results of tasks to allocated
	by the external allocator into the external allocator from the
	inventory manager.

	* org/cougaar/domain/glm/plugins/TaskUtils.java:
	Fix Bug #235
	Add getValidResult to get the allocation result associated with a
	Task in a uniform way instead of slightly different and
	occasionally incorrect ways in several places. Use this method in
	those places to fix some bug. Mainly, use the estimated result and
	not the reported result. The estimated result can be made to agree
	with the task preferences, the reported result cannot. When
	preferences are changed, the reported result lies for awhile.

	* org/cougaar/domain/glm/plugins/GLMDecorationPlugIn.java:
	Debugging support
	USe GLMDebug delayed separator message when synchronous debugging
	mode.

	* org/cougaar/domain/glm/plugins/BasicProcessor.java:
	Fix Bug #235
	Use PlugInHelper to update allocation results and remove duplicate
	code. Create estimated allocation result with 0.0 confidence.

	* org/cougaar/domain/glm/ldm/asset/InventoryBG.java:
	Fix Bug #235
	Include refill projections in dueins.
	Create a different DueOut for every day from a projection. This is
	essential to modified the success/fail status of each day of
	projection. Use AllocationResultHelper to edit the day-by-day
	allocation results to return a time-phased value.
	Interpret time-phased allocation result when interpreting refill
	dueins.

	* org/cougaar/domain/glm/debug/GLMDebug.java:
	Support debugging
	Add delayed separator messages. Used in synchronous plugin mode to
	suppress the separator messages until actual debugging output
	occurs.
	
2001-03-30  Michael Thome  <mthome@bbn.com>

	* GLMDomain
	Add glm, mlm, alp aliases.  We now expect it to be loaded as "glm"

2001-03-21  Noelle Givler <ngivler@bbn.com>

	* org/cougaar/domain/glm/ldm/Oplan.java:

	Fix for bux 189. Oplan no longer contains any references to
	associated org activities, org relations, force packages, or 
	policies. PlugIns interested in these objects should subscribe to
	them directly.

2001-03-21  Ray Tomlinson  <RTomlinson@bbn.com>

	* org/cougaar/domain/glm/plugins/inventory/GeneralInventoryManager.java:
	Add ProjectSupply tasks to the RefillTasks predicate. This
	predicate is used to find refills with changed allocation results.
	Previously, AllocationResults for refill projections were never updated.
	
2001-03-21  Ray Tomlinson  <RTomlinson@bbn.com>

	* org/cougaar/domain/glm/ldm/Oplan.java:

	Fix for bux 189. Oplan no longer contains any references to
	associated org activities, org relations, force packages, or 
	policies. PlugIns interested in these objects should subscribe to
	them directly.

2001-03-21  Noelle Givler <ngivler@bbn.com>

	* org/cougaar/domain/glm/ldm/Oplan.java:

	Fix for bux 189. Oplan no longer contains any references to
	associated org activities, org relations, force packages, or 
	policies. PlugIns interested in these objects should subscribe to
	them directly.

2001-03-21  Ray Tomlinson  <RTomlinson@bbn.com>

	* org/cougaar/domain/glm/plugins/inventory/GeneralInventoryManager.java:
	Add ProjectSupply tasks to the RefillTasks predicate. This
	predicate is used to find refills with changed allocation results.
	Previously, AllocationResults for refill projections were never updated.

2001-03-20  Ray Tomlinson  <RTomlinson@bbn.com>

	* org/cougaar/domain/glm/plugins/inventory/SupplyExpander.java:
	Kludge to propagate AllocationResult changes to the supply
	expansion. Ideally, this should be done by subscribing to the
	supply expansions, but the structure of the DecoratorPlugIn makes
	this difficult. Instead, we build on the kludge that the
	ProjectWithdraw subtask is publishChanged when its Allocation
	AllocationResult is changed.
	
	* org/cougaar/domain/glm/plugins/inventory/InventoryManager.java:
	Do not advance the day after failing a dueout in case multiple
	dueouts must be failed to maintain adequate inventory.

	* org/cougaar/domain/glm/plugins/inventory/GeneralInventoryManager.java:
	Always call adjustForInadequateInventory in adjustWithdraws. It
	has side effects that are necessary for producing a correct
	ScheduleContent. Also, fix off-by-one error in end test for last
	day in refillNeeded. The last planning day was never considered.
	

2001-03-14 Amy Fedyk <afedyk@bbn.com>
	Changed expansion of ProjectWithdraws from ProjectSupply tasks to only expand into a single ProjectWithdraw 
	which contains the demand rate info of the parent.  Handling of the daily withdraws is calculated in the InventoryBG.java
	InventoryBG.java
	SupplyExpander.java
	
2001-03-9 Noelle Givler  <NGivler@bbn.com>

	* XMLPolicyCreator
	Changed format for RangeRuleEntry to support associated RuleParameter
	values.
	
	Old format -
	
	...
	<RuleParam name="Breakfast">
	  <RangeSet value="MRE">
	    <RangeEntry min="0"  max="20" value="MRE"/>     
            <RangeEntry min="20"  max="60" value="MRE"/>
	  </RangeSet>
        </RuleParam>
	...

	New format - 

	...
        <RuleParam name="Breakfast">
          <RangeSet value="MRE">
            <RangeEntry min="0"  max="20">
              <String value="MRE"/>     
	    </RangeEntry>
	    <RangeEntry min="20"  max="60" >
	      <String value="MRE"/>
	    </RangeEntry>
	    <RangeEntry min="30"  max="50">
	      <RuleParam name="LongDaysOfSupply">
                <Long value="98" min="-56790" max="689999"/> 
              </RuleParam>
            </RangeEntry>
          </RangeSet>
        </RuleParam>
        ...

	New format includes a RangeEntry whose value is a LongRuleParameter.

2001-03-01  Ray Tomlinson  <RTomlinson@bbn.com>

	* InventoryPolicy -- et. al.
	Add policy-based ProjectionWeight creation.

	New class InventoryPolicy replaces DaysOnHandPolicy and includes
	all the RuleParameters from the latter plus optional
	RuleParameters setting the RefillSwitchoverDay and
	WithdrawSwitchoverDay values for ProjectionWeight creation.
	
	The InventoryPlugIn now maintains the default ProjectionWeight for
	a class of supply. The default ProjectionWeight is created as
	needed using the createProjectionWeight method. This method may be
	overridden to provide a particular default. The former projection
	weight creation has been retained by overriding this method.
	
	A new setProjectionWeight method allows the default to be reset.
	This is used when an InventoryPolicy is encountered that specifies
	new switchover days. This method may also be overridden to ignore
	the policy-based projection weights.
	
	The default default projection weight (that's two defaults) is
	implemented by a new ProjectionWeightImpl class. Which may also be
	used to create fixed switchover day based projection weights.

2001-02-27  Ray Tomlinson  <RTomlinson@bbn.com>

	* UIInventoryImpl
	Return schedules based on start time for non-projected dueouts.
	The start time corresponds to when the inventory level is
	decremented. The end time corresponds to when the items arrive at
	the destination. The latter may be a due in for another inventory
	where it will use the end time of the task/allocation.

	This change only applies to tasks with the WITHDRAW verb and their
	allocations. (Green bars on the chart).

2001-02-21  Ray Tomlinson  <RTomlinson@bbn.com>

	* UniversalAllocator Fix Bug #152
	Compose name from plugin parameters so that different instances of
	the plugin will create and use distinct sink assets.

2001-02-20  Ray Tomlinson  <RTomlinson@bbn.com>

	* SubscriptionClient
	ThreadLocal variable current can be set to record the current
	SubscriptionClient being executed by a thread. This information
	then becomes available to code running in the thread to reveal the
	identity of the current SubscriptionClient. This is especially
	useful when composing error messages.

	* PlugInAdapter
	Set the SubscriptionClient.current ThreadLocal variable to be the
	current plugin. This variable is then accessible for additional
	information in debug printouts.

	* Subscriber
	Catch PublishException and print error messages describing the
	details of the publishing error.

	* ALPPlan
	Check that an object being added to the allObjects container is
	not already in the container and that an object being removed from
	the allObjects container is, in fact, in the container. In both
	cases a PublishException is thrown. The exception may contain a
	PublishStack from the prior activity that is in conflict with the
	current, erroneous activity. This latter behavior is enabled by
	the org.cougaar.core.cluster.savePriorPublisher system property
	being true. The default is false since keeping the history is
	expensive, but invaluable for debugging publishing errors.

	* PublishStack
	A Throwable having a SubscriptionClient field to record the state
	of a SubscriptionClient publishing something.

	* PublishException
	RuntimeException signifying something wrong with the publishing of
	an object. Used by ALPPlan.

2001-02-15  Ray Tomlinson  <rtomlinson@bbn.com>

	* InventoryPlugIn
	Maintains the DueOutPredicate. This is the predicate used by the
	WithdrawAllocator to select Tasks to allocate against inventories
	of a supply type. Putting it in the plugin makes it accessible to
	the InventoryManager (which see).

	* WithdrawAllocator
	Gets the DueOutPredicate from the InventoryPlugIn instead of
	creating it itself.

	* InventoryManager
	Publishes a DeletionPolicy reflecting the need to keep due out
	Tasks in the LogPlan in order to compute NDaysDemand. The deletion
	delay specified by the policy tracks the daysBackward_ variable.
	The predicate of the DeletionPolicy is the DueOutPredicate
	obtained from the InventoryPlugIn.

2001-02-13  Ray Tomlinson  <rtomlinson@bbn.com>

	* OplanWatcherLP
	Reinstate logplan.change(selfOrg) when org activities cause the
	location schedule to change.

	* OrgReportPlugIn
	When resending asset transfers due to changes to the self
	organization, pass through the change reports.

	* PropagationPlugIn
	Only re-propagate when an organization changes due to a change in
	relationships as indicated by the presence of
	RelationshipSchedule.RelationshipScheduleChangeReport in the
	change report collection.

2001-02-02 Mark Davis <mdavis@bbn.com>
	* org.cougaar.domain.mlm.ui.planviewer.inventory.InventoryChart
	and others in that package.

	Made compatible to both build and run Inventory GUI with new Sitraka JChart upgrade (new jcchart451K.jar to replace old jcchart400K.jar in core).
Cannot mix and match different builds of glm and core across this date.
	
2001-01-11 Jim Winston <jwinston@bbn.com>
	* org.cougaar.domain.mlm.plugin.generic.PropgationPlugIn
	* org.cougaar.domain.mlm.plugin.ldm.XMLPolicyPlugIn
	Both PlugIns now accept more than one XML file parameter. 
	
2001-01-11 Amy Fedyk <afedyk@bbn.com>
	* org.cougaar.domain.glm.plugins.projection.GenerateSupplyDemandExpander
	Removed dependency on OPlan for determining time phased location.
	Made use of LocationSchedulePG on Organization.  This necessitates
	that Plugins populate this PG on the Organization.
	
	* org.cougaar.domain.glm.plugins.inventory.SupplyExpander
	Using LocationSchedulePG for FROM Prep in creation of Transport Tasks.
	If LocationSchedulePG is not present on Organization, HomeLocation is used.
	
2001-01-05 Noelle Givler <ngivler@bbn.com>
	* Several
	Replaced use of Iterator over Schedules. Depending on the use, code
	was converted to iterate over either a full copy of the Schedule - 
	ArrayList copy = new ArrayList(schedule)
	- or a prescreened subset - 
	Collection screened = schedule.filter(predicate)
 	
	
2000-11-21  Ray Tomlinson  <RTomlinson@bbn.com>

	* Several
	Use alp.util.OptionPane instead of javax.swing.JOptionPane to cure
	dialog size problems in demo mode. Not every instance has been
	converted. The remainder can be converted as needed.

2000-11-10  Ray Tomlinson  <RTomlinson@bbn.com>

	* Everywhere
	All uses of DEMANDRATE prepositional phrase (and DEMANDMULTIPLIER)
	have been converted to use preferences and allocation results
	instead. This enables changing these values without rescinding and
	allows failback to be implemented.

	* AlpineAspectType
	Contains aspect type definitions and utilities for aspect types
	that are not part of the core. Specifically, DEMANDRATE and
	DEMANDMULTIPLIER aspects.

2000-11-03  Ray Tomlinson  <RTomlinson@bbn.com>

	* TimedTaskEventReport
	Fixed Bug #73

2000-09-15  Michael Thome  <mthome@bbn.com>

	* Various
	Update references to old Rate measure to AbstractRate.

2000-09-11  Michael Thome  <mthome@bbn.com>

	* alpprops.def
	Add some AirLiftPG slots for TOPS.

2000-08-25 Jim Winston    <jwinston@bbn.com>
	* DetailRequestLP, QueryRequest, OplanCoupon, GetOplanPlugIn
	Added directive messages and support in logic provider for querying
	remote logplans. The first use is for Oplan propagation. Instead
	of sending the entire Oplan to all clusters, they get an OplanCoupon
	instead. The GetOplanPlugIn uses the new query method to retrieve
	only the pertinent pieces of the Oplan from its home cluster.

2000-08-11 Jim Winston    <jwinston@bbn.com>

	* LightweightManifest
	Added LightweightManifest capability. Consists of new logic provider,
	asset, property group, and directives
	
2000-08-11  Michael Thome  <mthome@bbn.com>

	* OPlan
	Fix some gross inefficiencies in OPlan data structure.  Share as
	much immutable structure as possible.  This cuts the serialized
	size in half.

2000-07-21  Jim Winston    <jwinston@bbn.com>
	* mil.darpa.log.alp.domain.oplan
	oplanID is a String again
	There is a UID as well as an oplanID
	OplanContributors get/set OplanUID
	
2000-07-17  Michael Thome  <mthome@bbn.com>

	* AssignedPG (alpprops.def)
	Deprecate all accessors of AssignedPG because RelationshipSchedule 
	is the new new thing.

2000-06-21  Michael Thome  <mthome@bbn.com>

	* OrgRTDataPlugIn
	Fix reflection to be able to construct Roles and other
	interning-like plan objects.

2000-06-02  Beth DePass  <bdepass@bbn.com>
  
  * GLS PlugIns
  Update wrt propagation changes
  
2000-05-23  Michael Thome  <mthome@bbn.com>

	* FoodPG
	Removed refrigeration attributes, added type attribute (SRA).

2000-05-17  Michael Thome  <mthome@bbn.com>

	* DirectiveMessage, etc.
	Propagate all ChangeReports through LPs and through message sends.
	
2000-05-09  Michael Thome  <mthome@bbn.com>

	* ChangeReporter
	A trivial plugin which watches and reports on detailed change
	information going through the logplan.

2000-04-14  Michael Thome  <mthome@bbn.com>

	* StrategicTransportProjectorPlugIn
	Update so that it really works under 6.x.

2000-04-04  Jim Winston    <jwinston@bbn.com>
	* mil.darpa.log.alp.domain.oplan
	oplanID is now a UID instead of a String
	
2000-03-21  Michael Thome  <mthome@bbn.com>

	* All
	Finish removal of JGL

2000-03-06  Michael Thome  <mthome@bbn.com>

	* OrgRTDataPlugIn
	Update using real object for ClusterIdentifiers

2000-03-03  Michael Thome  <mthome@bbn.com>

	* mil.darpa.log.alp.domain
	ALP (logistics) domain moved from core.

2000-02-16  Ray Tomlinson  <rtomlinson@bbn.com>

	* OPlanPlugIn
	Remember if Oplan has been published in a private state variable
	so the GUI can be correct after rehydration.

	* GLSGUIInitPlugIn
	Use Oplan from OplanPlugIn instead of create our own.

	* GLSGUIInitPlugIn
	Add private state variable to count root tasks sent. Include the
	count in the feedback in the GUI. Disable the button until all the
	ducks are lined up and it is legitimate to send a root
	task. Include the task number in the task using "Sequence"
	preposition.

1999-12-17  Michael Thome  <mthome@bbn.com>

	* Various
	Fix ambiguous method references: these are cases where a method is 
	accessible via both inheritance and enclosing (outer) instances.
	Fix overgeneralization of try-catch(Exception) where
	try-catch(RuntimeException) is more appropriate.

	* ConnectionPool, Connection, ThreadedPlanServer
	Reimplement ConnectionPool - Less expensive, configurable options, 
	support for multiple instances, cleaner handshaking, more
	documentation and diagnostics.  Also moved Connection to a
	separate file.

1999-11-22  Michael Thome  <mthome@bbn.com>

	* StrategicTransportProjectorPlugIn
	Prevent silly traversal of parent tasks across cluster boundaries.

1999-11-19  Michael Thome  <mthome@bbn.com>

	* PropagationPlugIn
	Only propagate top-level transferrables, not
	OplanContributors. Warn about and then ignore OplanContributor
	directives in forwarding files (e.g. forward.xml).

	* OplanPlugIn, OplanFileReader
	Load Oplan objects to match new Oplan layout with
	OplanContributors as attatched Oplan parts which also get entered
	into the logplan.
	
	* OrgReportPlugIn
	Attempt to solve the problem where a rescind of an ReportForDuty
	directive cannot figure out how to reconnect the org to it's old
	superior.  The hacked solution is to assume that the org which
	directed the reassignment in the first place should be the new
	superior. 

1999-10-14  Michael Thome  <mthome@bbn.com>

	* OrgRTDataPlugIn
	Make primitive types really work.  example:
		[MilitaryOrgPG]
		IsReserve	boolean	"true"

	Make complex objects as values work in the case of LDMF-created
	objects.  The syntax is an extension of the current one.  A PG
	value line may look like: 
		Property	TypeToCreate	parameters
	where Property is an interface, e.g. in alp.ldm.plan that the LDMF 
	can create with no arguments, and paramters is a comma-separated
	string like:
		"Slot1=value, Slot2=type value"
	Note that there are two allowed slot/value syntaxes.  If no value
	type is specified, it assumes String.  The first form looks for a
	method on the LDMF-created object "obj" of the signature
	"setSlot1(String)".  The second form will create an object of the
	spec "type value", which may be any sort of object, including
	other LDMF objects or even Collection types, and then looks for a
	"setSlot2" method which will accept the result type.  Example:
		[MilitaryOrgPG]
		HomeLocation	GeolocLocation "GeolocCode=BBNV, IcaoCode=String KBOS"	
	A better implementation of the first form (implicit type) and look 
	for a setter which takes a type that is known to be constructable
	with a string.
	
1999-10-04  Michael Thome  <mthome@bbn.com>

	* OrgRTDataPlugIn
	Lowercase type specifiers in cluster ini files are now interpreted 
	as builtin types rather than wrapper classes.

1999-09-23  Michael Thome  <mthome@bbn.com>

	* ChangeLog
	Added a ChangeLog for alpine plugins.

