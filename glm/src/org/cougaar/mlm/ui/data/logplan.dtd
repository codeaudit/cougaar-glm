<!-- Document Type Declaration (DTD) for LogPlan
-->

<!-- A LogPlan contains zero or more objects -->
<!ELEMENT LogPlan (object)*>

<!-- An object contains zero or more fields -->
<!ELEMENT object (field*)>
<!ATTLIST object class CDATA #REQUIRED>
<!-- Class is the fully qualified class name -->
<!ATTLIST object UID CDATA #IMPLIED>
<!-- UID is optional -->

<!-- A field contains zero or more of: "parseable character data", or object, or collection -->
<!ELEMENT field (#PCDATA | object | collection)*>
<!ATTLIST field name CDATA #REQUIRED>
<!-- A name is a property name (as defined in the java.beans package) of the object which contains this field -->
<!ATTLIST field type (Char    | 
                      Byte    | 
                      Boolean |
                      Short   | 
                      Integer | 
                      Long    | 
                      Float   | 
                      Double  | 
                      String  | 
                      object  | 
                      UUID    |
                      Date    |
                      collection) #REQUIRED>
<!-- If the type of a field is "object", then the field must contain an object element; if the type of a field is "collection", then the field must contain a collection element. -->

<!-- Collections are used to describe indexed properties of objects.  An indexed property is defined as a field, with type="collection", which contains a collection.  
There are 3 patterns, depending on the value of the collection type attribute:

A collection of objects:

    <collection type=object>
      <object class="fully qualified path name">
      ...
      </object>
    </collection>

A collection of primitive types, for example, a collection of strings:

    <collection type="string">
      <value>
      ...
      </value>
    </collection>

A collection of collections:

    <collection type="collection">
      <collection type="...">  // type is object or collection or primitive
      </collection>
    </collection>

Examples:
    The property accessed via the method
        String[] getPreferenceAspectTypes() 
    would be represented as:

    <field name="preferenceAspectTypes" type="collection">
      <collection type="string">
        <value>
          START_TIME
        </value>
        <value>
          STOP_TIME
        </value>
      </collection>
    </field>

    The property accessed via the method 
        PrepositionalPhrases[] getPrepositionalPhrases()
    would be represented as:

    <field name="prepositionalPhrases" type="collection">
      <collection type="object">
        <object class="prepositionalPhrase">
         .....
        </object>
      </collection>
    </field>

-->

<!ELEMENT collection (value* | object* | collection*)>
<!ELEMENT value (#PCDATA)>
<!ATTLIST collection type CDATA #REQUIRED>




