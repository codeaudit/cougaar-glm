;!generate: org.cougaar.tools.build.PGWriter glmprops.def

;
; <copyright>
;  Copyright 1997-2000 Defense Advanced Research Projects
;  Agency (DARPA) and ALPINE (a BBN Technologies (BBN) and
;  Raytheon Systems Company (RSC) Consortium).
;  This software to be used only in accordance with the
;  COUGAAR licence agreement.
; </copyright>
;

package=org.cougaar.domain.glm.asset
import= org.cougaar.domain.planning.ldm.asset.*,\
        org.cougaar.core.cluster.ClusterIdentifier,\
	org.cougaar.domain.glm.asset.*,\
	org.cougaar.domain.glm.execution.common.InventoryReport
; import= org.cougaar.domain.glm.plan.*,\
;	org.cougaar.domain.glm.oplan.*,\
;	org.cougaar.domain.glm.policy.*
factoryExtends=org.cougaar.domain.planning.ldm.asset.PropertyGroupFactory

[InventoryPG]
slots=Scalar capacity, \
      Scalar initialLevel, \
      Scalar reorderLevel, \
      Scalar minReorder, \
      Scalar unobtainable, \
      boolean fillToCapacity, \
      Asset resource
delegates=InventoryBG invBG
invBG.delegate= int resetInventory(Inventory inventory, long today);\
	long getStartTime();\
	int getToday();\
	int getFirstPlanningDay();\
	Scalar getLevel(long day);\
	Scalar getLevel(int day);\
	int withdrawFromInventory(Inventory inventory, ClusterIdentifier cluster);\
	Scalar getNDaysDemand(int day, int days_of_demand);\
	int addPreviousRefillsToInventory(Task maintainInv);\
	int addDueIn(Task refillTask);\
	int removeDueIn(Task refillTask);\
	int getPlanningDays();\
	int determineInventoryLevels();\
	Task refillAlreadyFailedOnDay(int day);\
	Task getRefillOnDay(int day);\
	Scalar getProjected(int day);\
	Date lastDemandTaskEnd(Inventory inventory);\
	Vector getPreviouslyFailedDueOuts();\	
	Integer getFirstOverflow(int day, ClusterIdentifier cluster); \
	DueOut getLowestPriorityDueOutBeforeDay(int end);\
	int updateContentSchedule(Inventory inventory);\
	int clearContentSchedule(Inventory inventory);\
	int printQuantityScheduleTimes(Schedule sched);\
	int printInventoryLevels(Inventory inventory, ClusterIdentifier clusterID);\
	PGDelegate copy(PropertyGroup pg);\
	Enumeration getAllDueIns();\	
	ProjectionWeight getProjectionWeight();\	
	void addInventoryReport(InventoryReport anInventoryReport);
reorder_level.doc=volume level at which you are allowed to reorder. 
in_reorder.doc=minimum volume you can order. Should be \ 
        less than or equal to reorder level. 
unobtainable.doc=Quantity of materiel which cannot be used. E.g. fuel \ 
        which cannot be pumped out of a tank. 
fill_to_capacity.doc=specifies whether the inventory is filled to cpacity \ 
        for refills. 
initial_level.doc=Level of the inventory before any withdraws or deposits. 
capacity.doc=maximum amount that can be contained or accommodated. 

[SupplyClassPG]
slots=String supplyClass, \
      String supplyType
supplyClass.doc=Description of the Class to which this item belongs. \
	e.g. ClassISubsistence
supplyType.doc=Specific type of item within the greater class. \
	e.g. BulkWater

;;
;; examples
;;

;[SamplePG]
;slots=Mass mass, \
;	List<Role> roles, \
;	int matrix(int x, int y)
;weight.doc=The mass of my Asset