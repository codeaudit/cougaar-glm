/*
 * <copyright>
 *  Copyright 1997-2000 Defense Advanced Research Projects
 *  Agency (DARPA) and ALPINE (a BBN Technologies (BBN) and
 *  Raytheon Systems Company (RSC) Consortium).
 *  This software to be used only in accordance with the
 *  COUGAAR licence agreement.
 * </copyright>
 */
 
package org.cougaar.domain.mlm.ui.psp.plan;

import java.io.*;
import java.net.URL;
import java.net.URLConnection;
import java.util.Enumeration;
import java.util.Vector;

import org.cougaar.core.cluster.CollectionSubscription;
import org.cougaar.core.cluster.IncrementalSubscription;
import org.cougaar.core.cluster.Subscription;
import org.cougaar.domain.planning.ldm.asset.Asset;
import org.cougaar.domain.planning.ldm.plan.*;
import org.cougaar.lib.planserver.*;
import org.cougaar.util.*;

import org.cougaar.domain.glm.ldm.asset.Organization;

/**
  *   A Demo PSP which illustrates how LPS services and javascript
  *   can be used to generate simple graphs in a browser.   The data is
  *   generated  randomly below.   However, in a real application it would
  *   be used to render LogPlan data
  **/

public class PSP_Inventory extends PSP_BaseAdapter
                       implements PlanServiceProvider, UISubscriber
{
    /** A zero-argument constructor is required for dynamically loaded PSPs,
        required by Class.newInstance()
        **/
    public PSP_Inventory()
    {
       super();
    }

    public PSP_Inventory( String pkg, String id ) throws RuntimePSPException
    {
        setResourceLocation(pkg, id);
    }


    public boolean test(HttpInput query_parameters, PlanServiceContext sc)
    {
        super.initializeTest(); // IF subclass off of PSP_BaseAdapter.java
        return false;  // This PSP is only accessed by direct reference.
    }

    private static UnaryPredicate getPred(){
        return new UnaryPredicate() {
              public boolean execute(Object o) {
                 if (o instanceof Organization) {
              //System.out.println("PREDICATE CALLED true!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
                          return true; }
                 return false;
          }
      };
    }

    public void execute( PrintStream out,
                          HttpInput query_parameters,
                          PlanServiceContext psc,
                          PlanServiceUtilities psu ) throws Exception
    {
        out.println("<HTML>");
        out.println("<HEAD>");
        out.println("<H2>Simple Graphs via JavaScript and PSPs</H2>");
        out.println("<SCRIPT LANGUAGE=\"JavaScript1.2\" SRC=\"graph.js\"></SCRIPT>");
        out.println("</HEAD>");
        out.println("<BODY>");
        out.println("<P>This is an example of how to use PSPs and simple javascript to generate simple/light-weight graphs to illustrate data. "
                    + " The HTML/javascript is generated by a PlanServiceProvider located at LogPlanServer."
                    + " This PSP generates random data each time it is evoked. "
                    + " Thus, refresh your brower for a new graph!</P>");
        out.println("<SCRIPT LANGUAGE=\"JavaScript1.2\">");
        out.println("var g = new Graph(400,300);");
        out.println("g.scale = 10;");
        out.println("g.setXScale(0,2,1);");
        out.println("g.title = \"Inventory\";");
        out.println("g.addRow(" + getRandomRow(25,100) + ");");
        out.println("g.addRow("+ getRandomRow(25,100) +");");
        out.println("g.build();");
        out.println("</SCRIPT>");
        out.println("</BODY>");
        out.println("</HTML>");
    }

    /** generate random ints (# = number) from 0 to max **/
    private String getRandomRow(int number, int max)
    {
         String row = new String();
         int val = (int)(Math.random()*(double)max);
         int delta = (int)(Math.random()*((double)max/(double)20));
         int tmp =0;

         for(int i=0; i<number; i++)
         {
             tmp = (val + (int)(Math.random()*(double)delta));
             if( tmp >= max){ val = delta;  }
             else { val += delta; }
             row += Integer.toString(tmp);
             if( i< (number -1 ) ) row += ",";
         }
         return row;
    }



    // private Vector myVectorOfTasks = new Vector();
    public void subscriptionChanged(Subscription subscription) {
    /**
             synchronized(myVectorOfTasks) {
                 Enumeration e = ((IncrementalSubscription)subscription).getAddedList();
                while (e.hasMoreElements()) {
                         Object obj = e.nextElement();
                         myVectorOfTasks.addElement(obj);
                }
             }
    **/
    }

    /**
      * A PSP can output either HTML or XML (for now).  The server
      * should be able to ask and find out what type it is.
      **/
    public boolean returnsXML() {
         return false;
    }

    public boolean returnsHTML() {
         return true;
    }

    /**  Any PlanServiceProvider must be able to provide DTD of its
      *  output IFF it is an XML PSP... ie.  returnsXML() == true;
      *  or return null
      **/
    public String getDTD()  {
         return null;
    }
}

